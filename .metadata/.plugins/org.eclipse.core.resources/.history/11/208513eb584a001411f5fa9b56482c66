import java.awt.Color;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.util.Rotation;
import org.jfree.util.ShapeUtilities;

import com.leapmotion.leap.Controller;
import com.leapmotion.leap.FingerList;
import com.leapmotion.leap.Frame;
import com.leapmotion.leap.HandList;
import com.leapmotion.leap.Listener;
import com.leapmotion.leap.Vector;

public class Plotter extends JFrame {
  public JFreeChart chart;
  public float[][] data = new float[2][0];
  public FastScatterPlot plot;
  private static final long serialVersionUID = 1L;

  public Plotter(String applicationTitle, String chartTitle) {
        super(applicationTitle);
        
        final NumberAxis domainAxis = new NumberAxis("X");
        domainAxis.setRange(-20, 150);
        final NumberAxis rangeAxis = new NumberAxis("Z");
        rangeAxis.setRange(-100, 200);
        plot = new FastScatterPlot(this.data, domainAxis, rangeAxis);
        chart = new JFreeChart("Connecting to Leap Motion", plot);
        
        Shape shape  = new Ellipse2D.Double(0,0,5,5);
        FastScatterPlotRenderer renderer = plot.getRenderer();
        renderer.setBaseShape(shape);
        renderer.setBasePaint(Color.red);
        
        // force aliasing of the rendered content..
        chart.getRenderingHints().put
            (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        final ChartPanel panel = new ChartPanel(chart, true);
        panel.setMouseWheelEnabled(true);
        
        panel.setPreferredSize(new java.awt.Dimension(500, 270));
        panel.setMinimumDrawHeight(10);
        panel.setMaximumDrawHeight(2000);
        panel.setMinimumDrawWidth(20);
        panel.setMaximumDrawWidth(2000);
        
        setContentPane(panel);
    }
    
    /*private static void generateCSV(String fileName,
			ArrayList<ArrayList<ArrayList<Float>>> data) {
		//Creates a file writer.
		try {
			FileWriter output = new FileWriter(fileName);
			
			//Loops through the data.
			for(int i = 0; i < data.size(); i++){
	        	//Gets the current frame.
	        	ArrayList<ArrayList<Float>> frame = data.get(i);
	        	
	        	//Now gets finger data.
	        	for (int j = 0; j < frame.size(); j++){
	        		//Gets the current hand.
	        		ArrayList<Float> fingers = frame.get(j);
	        		
	        		//Adds the data to the line of the csv.
        			output.append("Frame " + (i + 1) + ", Finger " + (j + 1) 
        					+ ", " + fingers.get(0) + ", " + fingers.get(1) + ", " + fingers.get(2)
        					+ ", ,");
        			
        			//Sees if we're at the last one.
        			if (j == frame.size() - 1){
        				output.append("\n");
        			}
	        	}
	        }
			
			//Flushes and writes to file.
			output.flush();
			output.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}*/
}