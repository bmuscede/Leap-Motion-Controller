import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Vector;


public class Test {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		String[] words;
		String[] arg;
		String[] varNames;
		String[] squareLens;
		Vector<String> domains = new Vector<String>();
		
		//Gets the words.
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String entry = "";
		try {
			entry = br.readLine();
		} catch (IOException ioe) {
			System.out.println("IO error!");
			System.exit(1);
		}
		
		words = entry.split(", ");
		
		//Gets the offset.
		try {
			entry = br.readLine();
		} catch (IOException ioe) {
			System.out.println("IO error trying to read your name!");
			System.exit(1);
		}
			
		arg = entry.split(",");
		
		//Gets the var names.
		try {
			entry = br.readLine();
		} catch (IOException ioe) {
			System.out.println("IO error trying to read your name!");
			System.exit(1);
		}
			
		varNames = entry.split(",");
		
		//Gets the length of the squares.
		try {
			entry = br.readLine();
		} catch (IOException ioe) {
			System.out.println("IO error trying to read your name!");
			System.exit(1);
		}
			
		squareLens = entry.split(",");
				
		//Now, calculates the words in the domain.
		System.out.println("Variables after domain consistency:");
		for(int i = 0; i < arg.length; i++){
			int paramOne, paramTwo;
			String[] nums = arg[i].split(" ");
			
			//Gets the parameters.
			paramOne = Integer.parseInt(nums[0]);
			paramTwo = Integer.parseInt(nums[1]);
			
			String format = varNames[i] + ": {";
			
			for (int j = 0; j < words.length; j++){
				for (int k = 0; k < words.length; k++){
					if (j == k) continue;
					
					//Gets the characters.
					char firstChar;
					char secondChar;
					
					try{
						firstChar = words[j].charAt(paramOne - 1);
						secondChar = words[k].charAt(paramTwo - 1);
					} catch (Exception e){
						continue;
					}
					
					if (firstChar == secondChar && !(format.contains(String.valueOf((firstChar))))){
						format += firstChar + ",";
					}
				}
			}
			
			//Prints the current line.
			domains.add(format);
			format += "}";
			System.out.println(format);
		}
		
		System.out.println("\nAfter first size elminination:");
		for(int i = 0; i < args.length; i++){
			int paramOne;
			String[] nums = arg[i].split(" ");
			
			//Gets the parameters.
			paramOne = Integer.parseInt(nums[0]);
			String format = "{";
			
			//Gets all the chars.
			String chars[] = domains.elementAt(i).replace("{","").split(",");
			
			for (int j = 0; j < chars.length; j++){
				for (int k = 0; k < words.length; k++){
					if ((words[k].length() == Integer.parseInt(squareLens[i].split(",")[0]) &&
							(words[k].charAt(Integer.parseInt(arg[i].split(",")[0])) == chars[j].charAt(0)))){
						format += chars[j] + ",";
					}
				}
			}
		}
	}

}
