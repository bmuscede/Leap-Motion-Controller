import com.leapmotion.leap.*;

public class LeapMotionController {
	//Whether tracking is paused or not.
	private boolean trackingPaused;
	//Whether the system is ready to START tracking.
	private boolean ready;
	
	//Tracking controller
	Controller leapController;
	MainListener leapListener;
	
	/**
	 * Constructor for the leap motion controller class.
	 */
	public LeapMotionController(){
		//Sets tracking to paused.
		trackingPaused = true;
		ready = false;
		
		//Now sets up Leap Motion specifics.
		leapController = new Controller();
		leapListener = new MainListener();
		leapController.addListener(leapListener);
	}
	
	/**
	 * Stops Leap Motion services to ensure proper functioning.
	 */
	public void destroyController(){
		//Stops the listener service.
		leapController.removeListener(leapListener);
	}
}

class MainListener extends Listener {
	/**
	 * Activates when the leap motion controller is activated.
	 */
	public void onConnect(Controller leapController) {
		//We want to send a message back to the main controller.
		ProgramController.leapStatus(ProgramController.CONNECTED);
	}
	
	/**
	 * Fires very rapidly. Extends multiple classes.
	 */
	public void onFrame(Controller leapController){
		//First, gets the frame
		Frame currentFrame = leapController.frame();
		
		//First, checks for hands.
		if (!checkHandStatus(currentFrame.hands())){
			//We terminate early.
			ProgramController.leapStatus(ProgramController.CONNECTED);
			return;
		} else {
			//We change program status.
			ProgramController.leapStatus(ProgramController.HANDS_PRESENT);
		}
	}
	
	/**
	 * Helper method to check for hands.
	 */
	private boolean checkHandStatus(HandList hands){
		//First, checks the hand number.
		if (hands.count() != 2) return false;
		
		//Next ensures there is a left and right hand.
		if ((hands.get(0).isLeft() && hands.get(1).isRight()) ||
				hands.get(0).isRight() && hands.get(1).isLeft()){
			return true;
		}
		
		return false;
		}
	}
